{"version":3,"file":"modal-content.js","sourceRoot":"","sources":["modal-content.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBASO,eAAe,CAAC,CAAA;AAEvB,sBAAoB,SAAS,CAAC,CAAA;AAC9B,uBAAiC,qBAAqB,CAAC,CAAA;AACvD,2BAAwB,yBAAyB,CAAC,CAAA;AAGlD;;GAEG;AAiBH;IAII,yBAAmB,MAAkC,EACjC,EAAc,EACd,MAAa,EACb,cAAkC,EAClC,GAAsB;QAJvB,WAAM,GAAN,MAAM,CAA4B;QACjC,OAAE,GAAF,EAAE,CAAY;QACd,WAAM,GAAN,MAAM,CAAO;QACb,mBAAc,GAAd,cAAc,CAAoB;QAClC,QAAG,GAAH,GAAG,CAAmB;QACtC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAClC,CAAC;IAED,yCAAe,GAAf;QAAA,iBAiBC;QAhBG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;aACnD,IAAI,CAAC,UAAA,UAAU;YACZ,IAAM,GAAG,GAAG,KAAI,CAAC,cAAc,EACzB,QAAQ,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,EACvC,WAAW,GAAG,GAAG,CAAC,cAAc,CAAC;YAEvC,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAChE,yBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YAElF,EAAE,CAAC,CAAC,KAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;gBACxB,KAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAClC,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,UAAU;gBACzB,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACX,CAAC;IAED,wCAAc,GAAd;QACI,kDAAkD;QAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU;YAC/B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAlCD;QAAC,gBAAS,CAAC,aAAa,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;2DAAA;IAlBvD;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,eAAe;YACzB,IAAI,EAAE;gBACF,UAAU,EAAE,IAAI;gBAChB,MAAM,EAAE,QAAQ;aACnB;YACD,QAAQ,EACZ,kUAMO;YACH,aAAa,EAAE,wBAAiB,CAAC,IAAI;SACxC,CAAC;;uBAAA;IAsCF,sBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,uBAAe,kBAqC3B,CAAA","sourcesContent":["import {\n    Component,\n    ComponentResolver,\n    ElementRef,\n    ViewContainerRef,\n    ReflectiveInjector,\n    ViewChild,\n    ViewEncapsulation,\n    AfterViewInit\n} from '@angular/core';\n\nimport {Modal} from './modal';\nimport {ModalCompileConfig} from '../../models/tokens';\nimport {DialogRef} from '../../models/dialog-ref';\nimport {VEXModalContext} from './modal-context';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n    selector: 'modal-content',\n    host: {\n        'tabindex': '-1',\n        'role': 'dialog'\n    },\n    template:\n`<div tabindex=\"-1\" role=\"dialog\"\n      [class]=\"context.contentClassName\" (clickOutside)=\"onClickOutside()\">\n    <div style=\"display: none\" #modalDialog></div>    \n    <div *ngIf=\"context.showCloseButton\" \n         [class]=\"context.closeClassName\" \n         (click)=\"dialog.dismiss()\"></div>\n</div>`,\n    encapsulation: ViewEncapsulation.None,\n})\nexport class VexModalContent implements AfterViewInit {\n    private context: VEXModalContext;\n    @ViewChild('modalDialog', {read: ViewContainerRef}) private _viewContainer: ViewContainerRef;\n\n    constructor(public dialog: DialogRef<VEXModalContext>,\n                private el: ElementRef,\n                private _modal: Modal,\n                private _compileConfig: ModalCompileConfig,\n                private _cr: ComponentResolver) {\n        this.context = dialog.context;\n    }\n\n    ngAfterViewInit() {\n        this._cr.resolveComponent(this._compileConfig.component)\n            .then(cmpFactory => {\n                const vcr = this._viewContainer,\n                      bindings = this._compileConfig.bindings,\n                      ctxInjector = vcr.parentInjector;\n\n                const childInjector = Array.isArray(bindings) && bindings.length > 0 ?\n                    ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;\n\n                if (this.el.nativeElement) {\n                    this.el.nativeElement.focus();\n                }\n\n                return this.dialog.contentRef =\n                    vcr.createComponent(cmpFactory, vcr.length, childInjector);\n            });\n    }\n\n    onClickOutside() {\n        // check that this modal is the last in the stack.\n        return this._modal.isTopMost(this.dialog) &&\n            !this.dialog.context.isBlocking &&\n            this.dialog.dismiss();\n    }\n}\n"]}