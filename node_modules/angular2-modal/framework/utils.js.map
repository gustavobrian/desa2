{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;AACH,gBAA0B,EAAO,EAAE,EAAO;IACtC,IAAI,CAAC,GAAS,EAAE,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,CAAE,CAAC,IAAI,CAAC,GAAS,EAAG,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,CAAE,CAAC,IAAI,CAAC,GAAS,EAAG,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,CAAC,CAAC;AACb,CAAC;AAfe,cAAM,SAerB,CAAA;AAED;;;;;GAKG;AACH,oBAA8B,IAAW,EAAE,IAAW;IAClD,MAAM,CAAC,IAAI;SACN,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,CAAC;AAE1D,CAAC;AAJe,kBAAU,aAIzB,CAAA;AAED;;;;GAIG;AACH,qBAA4B,OAAe,EAAE,MAAqB;IAC9D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAAC,MAAM,CAAC,MAAM,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;IAClE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,CAAC;AAHe,mBAAW,cAG1B,CAAA;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,uBAA8B,GAA8B;IACxD,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC;SACjC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAG,CAAC,SAAI,GAAG,CAAC,CAAC,CAAC,CAAE,EAAhB,CAAgB,CAAC;SAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;IAEf,oCAAoC;IACpC,6CAA6C;IAC7C,0BAA0B;IAC1B,0BAA0B;AAC9B,CAAC;AATe,qBAAa,gBAS5B,CAAA","sourcesContent":["/**\n * Simple object extend\n * @param m1\n * @param m2\n * @returns {{}}\n */\nexport function extend<T>(m1: any, m2: any): T {\n    var m: T = <T>{};\n    for (var attr in m1) {\n        if (m1.hasOwnProperty(attr)) {\n            (<any>m)[attr] = (<any>m1)[attr];\n        }\n    }\n\n    for (var attr in m2) {\n        if (m2.hasOwnProperty(attr)) {\n            (<any>m)[attr] = (<any>m2)[attr];\n        }\n    }\n\n    return m;\n}\n\n/**\n * Simple, not optimized, array union of unique values.\n * @param arr1\n * @param arr2\n * @returns {T[]|any[]|any[][]|any[]}\n */\nexport function arrayUnion<T>(arr1: any[], arr2: any[]): T[] {\n    return arr1\n        .concat(arr2.filter(v => arr1.indexOf(v) === -1));\n\n}\n\n/**\n * Returns true if the config supports a given key.\n * @param key\n * @returns {boolean}\n */\nexport function supportsKey(keyCode: number, config: Array<number>): boolean {\n    if (!Array.isArray(config)) return config === null ? false : true;\n    return config.indexOf(keyCode) > -1;\n}\n\n/**\n * Given an object representing a key/value map of css properties, returns a valid css string\n * representing the object.\n * Example:\n * console.log(toStyleString({\n *     position: 'absolute',\n *     width: '100%',\n *     height: '100%',\n *     top: '0',\n *     left: '0',\n *     right: '0',\n *     bottom: '0'\n * }));\n * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n * @param obj\n * @returns {string}\n */\nexport function toStyleString(obj: any | CSSStyleDeclaration): string {\n    return Object.getOwnPropertyNames(obj)\n        .map(k => `${k}:${obj[k]}`)\n        .join(';');\n\n    // let objStr = JSON.stringify(obj);\n    // return objStr.substr(1, objStr.length - 2)\n    //     .replace(/,/g, ';')\n    //     .replace(/\"/g, '');\n}\n"]}